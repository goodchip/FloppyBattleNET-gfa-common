'
' FBT /FloppyBattleCtrl
' ---------------------
' (c)goodchip2021-2022
'
'
' ----- DVPT FLAGS ----
'
g_arc_amiga!=TRUE   ! amiga=TRUE | atari=FALSE
g_dev_mode!=FALSE
'
main:
'
' ----- GLOBAL VARS ----
'
g_prg_name$="FBT"
g_arg_max|=3
g_arg_dev$=""
g_ser_port_amiga$="COM1:"
g_ser_port_atari$="AUX:"
g_ser_timeout|=150
g_ser_esc$="AT"
g_ser_try_num|=3 ! not used
g_ser_chr_end|=13 ! not used
g_ser_chr_lo|=31
g_ser_chr_hi|=128
g_ser_rtn_esc&=128
g_ser_wai_nbr&=129
g_ser_end_esc&=13
g_ser_brg_off$="BOFF"
g_ser_brg_on$="BON"
DIM g_arg$(g_arg_max|)
'
IF g_arc_amiga!
  g_dos_base_ptr%=0
  g_dos_write_offset%=48
  g_dos_output_offset%=60
  g_dos_exit_offset%=144
  g_dos_printfault_offset%=474 ! doslib v36+
  g_dos_getargstr_offset%=534  ! doslib v36+
  g_dos_lib_str$="dos.library"+CHR$(0)
  g_dos_lib_ver|=36
  DIM g_reg%(16)
ENDIF
'
'
' ---- MAIN ROUTINE ----
'
'
' ON BREAK GOSUB xxx
' ON ERROR GOSUB xxx
'
' EVERY 1 GOSUB f_dev_debug
' EVERY STOP
'
'
IF @f_sys_open_libs
  '
  ' DO
  '
  IF g_dev_mode!
    ' FOR arg_cur|=1 TO g_arg_max|
    '   g_arg$(arg_cur|)="" ! erase previous args
    ' NEXT arg_cur|
    PRINT ">";g_prg_name$;
    LINE INPUT " ",g_arg_dev$
  ELSE
    con_in$=@f_con_in$
  ENDIF
  '
  arg_cnt|=@f_cut_args(@f_dev_return$(g_arg_dev$,con_in$))
  usr_method$=LEFT$(g_arg$(1),2)
  usr_command$=LEFT$(g_arg$(2),12)
  usr_data$=LEFT$(g_arg$(3),63)
  '
  ser_command$=UPPER$(usr_command$)
  '
  SELECT usr_method$
  CASE "-g"
    ser_method$="G"
  CASE "-s"
    ser_method$="S"
  CASE "-w"
    ser_method$="W"
  DEFAULT
    ser_method$=""
  ENDSELECT
  '
  IF usr_data$<>""
    ser_data$=":"+usr_data$
  ELSE
    ser_data$=""
  ENDIF
  '
  IF ser_method$<>""
    ser_to_sent$=ser_method$+ser_command$+ser_data$
    ser_ret_raw$=@f_ser_io$(ser_to_sent$,9600)
    ' @f_dev_out("["+ser_ret_raw$+"] : ",FALSE)
    '
    IF (LEFT$(ser_ret_raw$)=CHR$(g_ser_rtn_esc&))
      ser_rtn_cod$=MID$(ser_ret_raw$,2,3)
      SELECT ser_rtn_cod$
      CASE "200"
        ' PRINT MID$(ser_ret_raw$,5,1)
        IF (MID$(ser_ret_raw$,5,1)=CHR$(g_ser_rtn_esc&))
          @f_con_exit(MID$(ser_ret_raw$,6),0)
        ELSE
          @f_sys_exit(0)
        ENDIF
      CASE "204"
        @f_con_exit("",205)
      CASE "501"
        @f_con_exit("",212)
      DEFAULT
        @f_con_exit("err"+ser_rtn_cod$,209)
      ENDSELECT
    ELSE
      @f_con_exit("",218)
    ENDIF
  ELSE
    IF usr_method$="?"
      @f_con_out(g_prg_name$+" v0.3 by Goodchip&Cicile (c)2021-2022.",TRUE)
      @f_con_exit("",0)
    ELSE
      @f_con_exit("",120) ! bad command-line arguments
    ENDIF
  ENDIF
  '
  ' LOOP WHILE g_dev_mode!
  '
ENDIF
'
' loop in dev mode
GOTO main
'
'
' --- ARGUMENTS PROCESSING ----
'
FUNCTION f_cut_args(arg_str$)
  FOR arg_cnt|=1 TO g_arg_max|
    arg_str$=TRIM$(arg_str$)
    IF LEFT$(arg_str$,1)=CHR$(34)
      arg_char_mark|=34
      arg_start_mark|=2
    ELSE
      arg_char_mark|=32
      arg_start_mark|=1
    ENDIF
    arg_end_mark|=INSTR(arg_start_mark|,arg_str$,CHR$(arg_char_mark|))
    IF arg_end_mark|<>0
      g_arg$(arg_cnt|)=MID$(arg_str$,arg_start_mark|,arg_end_mark|-arg_start_mark|)
    ELSE
      g_arg$(arg_cnt|)=arg_str$
      EXIT IF TRUE
    ENDIF
    arg_str$=MID$(arg_str$,arg_end_mark|+1)
  NEXT arg_cnt|
  RETURN arg_cnt|-1
ENDFUNC
'
'
' ----- SERIAL IO ----
'
FUNCTION f_ser_io$(command$,speed&)
  OPEN "O",#1,@f_ser_arc_port$+STR$(speed&)+",N,8,1"
  @f_ser_purge
  PRINT #1,g_ser_esc$;g_ser_brg_off$;CHR$(g_ser_rtn_esc&);
  PRINT #1,g_ser_esc$;command$;CHR$(g_ser_rtn_esc&);
  ser_chr$=""
  ser_str$=""
  ser_flg!=FALSE
  ser_liv_ts%=TIMER
  ser_wai_add%=0
  '
  DO
    EXIT IF (TIMER-ser_liv_ts%)>(g_ser_timeout|)
    '
    IF @f_ser_buf_isfilled
      ser_chr$=CHR$(INP(1))
    ELSE
      ser_chr$=""
    ENDIF
    '
    IF (ser_chr$=CHR$(g_ser_wai_nbr&))
      ser_liv_ts%=ser_liv_ts%+(2000*5) ! +5sec?
    ENDIF
    '
    IF (ser_chr$=CHR$(g_ser_end_esc&))
      ser_flg!=TRUE
      EXIT IF TRUE
    ENDIF
    '
    IF NOT (ser_chr$<CHR$(g_ser_chr_lo|) OR ser_chr$>CHR$(g_ser_chr_hi|))
      ser_str$=ser_str$+ser_chr$
      ser_liv_ts%=TIMER
    ENDIF
    '
  LOOP UNTIL MOUSEK
  PRINT #1,g_ser_esc$;g_ser_brg_on$
  CLOSE #1
  IF ser_flg!
    RETURN TRIM$(ser_str$)
  ELSE
    RETURN ""
  ENDIF
ENDFUNC
'
'
' ----- BEGIN/END ----
'
FUNCTION f_sys_open_libs
  '
  IF g_arc_amiga!
    g_dos_base_ptr%=OpenLibrary(V:g_dos_lib_str$,g_dos_lib_ver|)
    IF g_dos_base_ptr%=0
      @f_con_exit("",122) ! library not found
      RETURN FALSE
    ENDIF
  ENDIF
  '
  RETURN TRUE
  '
ENDFUNC
'
PROCEDURE f_con_exit(con_out$,con_err_cod|)
  '
  ERASE g_arg$()
  '
  IF (con_err_cod|<>0)
    IF (con_out$="")
      @f_con_err(con_out$,con_err_cod|)
    ELSE
      @f_con_err(con_out$,con_err_cod|)
    ENDIF
  ELSE
    @f_con_out(con_out$,TRUE)
  ENDIF
  '
  f_sys_exit(con_err_cod|)
  '
RETURN
'
PROCEDURE f_sys_exit(con_err_cod|)
  '
  ERASE g_arg$()
  '
  IF g_arc_amiga! AND (g_dos_base_ptr%<>0)
    ~CloseLibrary(g_dos_base_ptr%)
    ERASE g_reg%()
  ENDIF
  '
  IF g_dev_mode!
    IF con_err_cod|>0
      PRINT "Err";+con_err_cod|
    ENDIF
  ELSE
    SYSTEM con_err_cod|
  ENDIF
  '
RETURN
'
'
' ----- DEV  -----
'
PROCEDURE f_dev_print(out_str$,out_ln!)
  IF g_dev_mode!
    IF out_ln!
      PRINT out_str$
    ELSE
      PRINT out_str$;
    ENDIF
  ENDIF
RETURN
'
FUNCTION f_dev_return$(dev_str$,pgm_str$)
  IF g_dev_mode!
    RETURN dev_str$
  ELSE
    RETURN pgm_str$
  ENDIF
ENDFUNC
'
' ----- SPECIALS FUNCTIONS DEPENDING ARCHITECTURE -----
'
FUNCTION f_ser_arc_port$
  IF g_arc_amiga!
    RETURN g_ser_port_amiga$
  ELSE
    RETURN g_ser_port_atari$
  ENDIF
ENDFUNC
'
FUNCTION f_ser_buf_isfilled
  ' "RETURN INP?(1)" is breaked in listing on amiga, when:
  IF g_arc_amiga!
    RETURN NOT EOF(#1) ! remplace by end of file device on Amiga
  ELSE
    RETURN gemdos(18)  ! remplace by GEMDOS function on Atari
  ENDIF
ENDFUNC
'
PROCEDURE f_ser_purge
  IF NOT g_arc_amiga!
    DO WHILE @f_ser_buf_isfilled
      dummy|=INP(1)
    LOOP
  ENDIF
RETURN
'
PROCEDURE f_con_err(err_str$,err_code%)
  IF (NOT g_arc_amiga!) OR g_dev_mode!
    PRINT err_str$;
  ELSE
    IF g_dos_base_ptr%<>0
      '
      err_str$=err_str$+CHR$(0)
      '
      g_reg%(6)=g_dos_base_ptr%     ! D6: dosbase?
      RCALL g_dos_base_ptr%-g_dos_output_offset%,g_reg%()
      '
      g_reg%(1)=err_code%           ! D1: code
      g_reg%(2)=V:err_str$          ! D2: header
      g_reg%(14)=g_dos_base_ptr%    ! A6: dosbase
      RCALL g_dos_base_ptr%-g_dos_printfault_offset%,g_reg%()
      '
    ELSE
      @f_con_exit("",122) ! library not found
    ENDIF
  ENDIF
RETURN
'
PROCEDURE f_con_out(out_str$,out_ln!)
  IF (NOT g_arc_amiga!) OR g_dev_mode!
    IF out_ln!
      PRINT out_str$
    ELSE
      PRINT out_str$;
    ENDIF
  ELSE
    IF g_dos_base_ptr%<>0
      '
      IF out_ln!
        out_str$=out_str$+CHR$(10)
      ENDIF
      out_str$=out_str$+CHR$(0)
      '
      g_reg%(6)=g_dos_base_ptr%    ! D6: dosbase?
      RCALL g_dos_base_ptr%-g_dos_output_offset%,g_reg%()
      '
      g_reg%(1)=g_reg%(0)           ! D1: handle
      g_reg%(2)=V:out_str$          ! D2: buffer
      g_reg%(3)=LEN(out_str$)-1     ! D3: length
      g_reg%(14)=g_dos_base_ptr%    ! A6: dosbase
      RCALL g_dos_base_ptr%-g_dos_write_offset%,g_reg%()
      '
    ELSE
      @f_con_exit("",122) ! library not found
    ENDIF
  ENDIF
RETURN
'
FUNCTION f_con_in$
  IF g_arc_amiga!
    arg_str$=""
    '
    IF g_dos_base_ptr%<>0
      '
      g_reg%(6)=g_dos_base_ptr%    ! D6: dosbase?
      RCALL g_dos_base_ptr%-g_dos_getargstr_offset%,g_reg%()
      arg_str$=CHAR{g_reg%(0)}
      '
      IF RIGHT$(arg_str$,1)=CHR$(10)
        arg_str$=LEFT$(arg_str$,LEN(arg_str$)-1)
      ENDIF
      '
    ELSE
      @f_con_exit("",122) ! library not found
    ENDIF
    '
    RETURN TRIM$(arg_str$)
  ELSE
    RETURN LEFT$(CHAR{basepage+129},BYTE{basepage+128})
  ENDIF
ENDFUNC
